using System;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ACMTTU.NoteSharing.Shared.SDK.Controllers;
using Microsoft.Azure.Cosmos;
using ACMTTU.NoteSharing.Platform.ClassApplication.Services;

namespace ACMTTU.NoteSharing.Platform.ClassApplication.Controllers
{
    [Route("api/class")]
    [ApiController]
    public class ClassController : PlatformBaseController
    {

        private Container classesContainer;
        public ClassController(IHttpClientFactory factory, DatabaseService databaseService) : base(factory)
        {
            this.classesContainer = databaseService.classroomsContainer;
        }

        /// <summary>
        /// This is how you document code
        /// 
        /// Visit the microservice's endpoint and append /swagger
        /// to see your docs in action
        /// </summary>
        /// <param name="">Some sort of Id</param>
        /// <returns>An array containing a value determined by the parameter</returns>
        [HttpGet("{id}")]
        public async Task<ActionResult<string>> GetValues(string id)
        {
            await this.classesContainer.CreateItemAsync<dynamic>(new Object() { });
            return ("Created an object");
        }
        
        ///<summary>
        ///This call is used to add a User to the Classroom
        /// using the User ID generated by the Users Classroom
        /// </summary>
        /// <param name="classID">GUID ID for the classroom to add user too</param>
        /// <param name="userID"> GUID ID of the user </param>
        [HttpPut("{classID}/Users/{userID}")]
        public async Task<ActionResult<string>> AddUserToClass(string classID, string userID){
            throw new NotImplementedException();
        }

        ///<summary>
        ///This call is used to remove a User from the Classroom
        /// using the User ID generated by the Users Classroom
        /// </summary>
        /// <param name="classID">GUID of the classroom</param>
        /// <param name="userID"> GUID ID of the user </param>
        [HttpDelete("{classID}/Users/{userID}")]
        public async Task<ActionResult<string>> RemoveUserFromClass(string classID, string userID){
            throw new NotImplementedException();
        }


        ///<summary>
        ///This call is used to search for a User by name
        /// using the name associated with the user
        ///</summary>
        /// <param name="classID"> GUID of the classroom</param>
        /// <param name="userName"> Name of the User</param>
        [HttpGet("{classID}/Users/{userName}")]
        public async Task<ActionResult<string>> QueryUser(string classID, string userName){
            throw new NotImplementedException();
        }
    }
}